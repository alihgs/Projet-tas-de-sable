##################################
# groupe MI 3
# Edgar BAGHDASARYAN
# Ali HARGAS
# Hatim ZELAMTA
# Anis FETOUAB
# https://github.com/uvsq22102013/projet_tas_de_sable/settings/interaction_limits
##################################

import tkinter as tk
import random

HEIGHT = 800
WIDTH = 800
grille = 30
g1= grille-1
tc = HEIGHT//grille
obj = []

p = HEIGHT/600

racine = tk.Tk()
canvas = tk.Canvas(racine, height = HEIGHT, width=WIDTH, bg = "black")
canvas.grid(row = 0, column = 0)
l3=[[0,0,0]]
for j in range(grille):
    for i in range(grille):
        l2=[]
        canvas.create_rectangle((i*tc,tc*j),(tc+i*tc,tc+j*tc), outline = "black")
        l2.append(i)
        l2.append(j)
        if 4 <i< 10 and 4 <j< 10 :
            l2.append(random.randint(3,5))
        else :
            l2.append(random.randint(1,3))
        l3.append(l2)
print(l3)

decal_x = [tc/2-15,tc/2-15,tc/2-5,tc/2+5,tc/2+5]
decal_y = [tc/2-15,tc/2+5,tc/2-5,tc/2+5,tc/2-15]
decal_a = [tc/2+5,tc/2+5,tc/2-5,tc/2-15,tc/2-15]
decal_b = [tc/2+5,tc/2-15,tc/2-5,tc/2-15,tc/2+5]
e = 0
for v in range(1,grille*grille+1):
    for r in range(l3[v][2]):
        obj.append(canvas.create_oval((l3[v][0]*tc*p+decal_x[r]*p,0+tc*l3[v][1]*p+decal_y[r]*p),(tc*p+l3[v][0]*tc*p-decal_a[r]*p,tc*p+tc*l3[v][1]*p-decal_b[r]*p), fill ="yellow"))

def changement_config():
    global l3, obj
    for v in range(1,grille*grille+1):
        if l3[v][0] == 0 and l3[v][1]== 0 and l3[v][2] >= 4:
            l3[v][2] -= 2
            l3[v+1][2] += 1
            l3[v+g1][2] += 1
        elif l3[v][0] == g1 and l3[v][1]== 0 and l3[v][2] >= 4:
            l3[v][2] -= 2
            l3[v-1][2] += 1
            l3[v+g1][2] += 1
        elif l3[v][0] == 0 and l3[v][1]== g1 and l3[v][2] >= 4:
            l3[v][2] -= 2
            l3[v+1][2] += 1
            l3[v-g1][2] += 1
        elif l3[v][0] == g1 and l3[v][1]== g1 and l3[v][2] >= 4:
            l3[v][2] -= 2
            l3[v-1][2] += 1
            l3[v-g1][2] += 1
        elif l3[v][0] == 0 and l3[v][2] >= 4:
            l3[v][2] -= 3
            l3[v-g1][2] += 1
            l3[v+g1][2] += 1
            l3[v+1][2] += 1
        elif l3[v][0] == g1 and l3[v][2] >= 4:
            l3[v][2] -= 3
            l3[v-g1][2] += 1
            l3[v+g1][2] += 1
            l3[v-1][2] += 1
        elif l3[v][1] == 0 and l3[v][2] >= 4:
            l3[v][2] -= 3
            l3[v+g1][2] += 1
            l3[v-1][2] += 1
            l3[v+1][2] += 1
        elif l3[v][1] == g1 and l3[v][2] >= 4:
            l3[v][2] -= 3
            l3[v-g1][2] += 1
            l3[v+1][2] += 1
            l3[v-1][2] += 1
        elif l3[v][2] >= 4:
            l3[v][2] -= 4
            l3[v+g1][2] += 1
            l3[v-g1][2] += 1
            l3[v+1][2] += 1
            l3[v-1][2] += 1
    for n in range(len(obj)):
        canvas.delete(obj[n])
    decal_x = [tc/2-15,tc/2-15,tc/2-5,tc/2+5,tc/2+5]
    decal_y = [tc/2-15,tc/2+5,tc/2-5,tc/2+5,tc/2-15]
    decal_a = [tc/2+5,tc/2+5,tc/2-5,tc/2-15,tc/2-15]
    decal_b = [tc/2+5,tc/2-15,tc/2-5,tc/2-15,tc/2+5]
    for v in range(1,grille*grille+1):
        for r in range(l3[v][2]):
            obj.append(canvas.create_oval((l3[v][0]*tc*p+decal_x[r]*p,0+tc*l3[v][1]*p+decal_y[r]*p),(tc*p+l3[v][0]*tc*p-decal_a[r]*p,tc*p+tc*l3[v][1]*p-decal_b[r]*p), fill ="yellow"))

bouton1 = tk.Button(racine, text="change config", command = changement_config)
bouton1.grid(row=1, column= 0)

racine.mainloop()